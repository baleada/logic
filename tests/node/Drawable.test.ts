import { suite as createSuite } from 'uvu'
import * as assert from 'uvu/assert'
import { Drawable, DrawableOptions } from '../../src/classes/Drawable'
import { getStroke } from 'perfect-freehand'

const suite = createSuite<{ setup: (options?: DrawableOptions) => Drawable}>('Drawable')

suite.before.each(context => {
  context.setup = (options = {}) => new Drawable(
    [],
    options
  )
})

suite(`stores the stroke`, context => {
  const instance = context.setup()

  assert.equal(instance.stroke, [])
})

suite(`assignment sets the stroke`, context => {
  const instance = context.setup()
  instance.stroke = [[1, 1]]

  assert.equal(instance.stroke, [[1, 1]])
})

suite(`setStroke sets the stroke`, context => {
  const instance = context.setup()
  instance.setStroke([[1, 1]])

  assert.equal(instance.stroke, [[1, 1]])
})

suite(`draw(...) draws the stroke`, context => {
  const value = context.setup().draw([[1, 1]]).stroke,
        expected = getStroke([[1, 1]])

  assert.equal(value, expected)
})

suite(`d gets the SVG d`, context => {
  const value = context.setup().draw([[1, 1], [10, 10]]).d,
        expected = 'M 5.346738830118461 -3.3467388301184613 Q 5.346738830118461 -3.3467388301184613 8.031789841831332 -0.8567898418313318 10.716840853544202 1.6331591464557977 11.323088499050783 2.477172760110192 11.929336144557364 3.321186373764586 12.234343533397759 4.314597507419221 12.539350922238153 5.308008641073856 12.51118370028664 6.346806886800021 12.483016478335127 7.385605132526186 12.124623761165454 8.361028039780244 11.76623104399578 9.336450947034304 11.115136643702101 10.146371479940118 10.464042243408421 10.956292012845932 9.588415915573712 11.515911277810005 8.712789587739005 12.075530542774077 7.7043096400304645 12.32625625502953 6.695829692321924 12.576981967284983 5.660084241477488 12.492563078573511 4.624338790633052 12.408144189862039 3.669770658766379 11.997419380116156 2.7152025268997058 11.586694570370272 1.9417552493987489 10.89266683559119 1.168307971897792 10.198639100812105 0.656961682887157 9.293973328036726 0.1456153938765219 8.389307555261347 -0.050091815202068624 7.368722489707823 -0.24579902428065914 6.348137424154298 -0.10537655697499115 5.318488591594376 0.03504591033067683 4.2888397590344525 0.49689578462576955 3.3579316640380505 0.9587456589208623 2.4270235690416486 1.6936671364501583 1.69232253489076 2.4285886139794544 0.9576215007398714 3.3596352220452017 0.49605091965233683 4.290681830110949 0.03448033856480226 5.320372743076234 -0.10563322777671758 6.35006365604152 -0.2457467941182374 7.3705899635068715 -0.04973341833139644 8.391116270972223 0.14627995745544453 9.29562859915324 0.6578976231832598 10.200140927334257 1.1695152889110751 10.893936596702318 1.9431707399242129 11.587732266070379 2.7168261909373506 11.998170686898382 3.671517497289534 12.408609107726384 4.626208803641718 12.492717269008415 5.661979533543839 12.576825430290445 6.69775026344596 12.325797185337874 7.706154948060355 12.074768940385304 8.71455963267475 11.51488701270969 9.590018035329301 10.955005085034076 10.465476437983854 10.144889260257528 11.11632783282206 9.334773435480981 11.767179227660266 8.35924305430742 12.125279301834482 7.383712673133859 12.483379376008696 6.344906023987156 12.511234957223643 5.3060993748404535 12.539090538438591 4.3127797881045975 12.233785139987905 3.319460201368742 11.92847974153722 2.4756284999858824 11.321978919231487 1.6317967986030224 10.715478096925754 1.63247797252941 10.716159475234978 1.6331591464557977 10.716840853544202 -0.8567898418313318 8.031789841831332 -3.3467388301184613 5.346738830118461 -3.8037182415759485 4.7634430861424075 -4.260697653033436 4.180147342166354 -4.5648010671073616 3.5044364417176537 -4.868904481181287 2.8287255412689536 -5.002457393157437 2.0998718336298277 -5.136010305133587 1.3710181259907013 -5.091250613492949 0.6313826228941792 -5.046490921852312 -0.1082528802023428 -4.8260200619760685 -0.8156825285646658 -4.605549202099824 -1.5231121769269889 -4.222180950722758 -2.157220126153854 -3.8388126993456924 -2.7913280753807195 -3.3148284372503203 -3.3152599416696282 -2.790844175154948 -3.839191807958537 -2.156697892273549 -4.222496646623943 -1.52255160939215 -4.6058014852893505 -0.8150999174810258 -4.826201601098522 -0.10764822556990161 -5.046601716907694 0.6319917497975995 -5.091287444774347 1.3716317251651007 -5.135973172640998 2.100472073868782 -5.002347375961971 2.829312422572463 -4.868721579282943 3.504992909301252 -4.564550595639602 4.180673396030041 -4.260379611996262 4.763923439148546 -3.803341873249373 5.347173482267051 -3.3463041345024838 5.346956156192756 -3.3465214823104725Z'

  assert.equal(value, expected)
})

suite(`respects toD option`, context => {
  const value = context.setup({ toD: () => 'M 0 0' }).d,
        expected = 'M 0 0'

  assert.equal(value, expected)
})


suite(`status is 'ready' after construction`, context => {
  const value = context.setup().status,
        expected = 'ready'

  assert.ok(value, expected)
})

suite(`status is 'drawn' after draw(...)`, context => {
  const value = context.setup().draw([[1, 1]]).status,
        expected = 'drawn'

  assert.ok(value, expected)
})

suite.run()
